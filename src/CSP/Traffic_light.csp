Light = Green -> Green -> Green -> Yellow -> Yellow -> Yellow ->  Red ->Red -> Red-> Light;

BBB = B -> BBB; 

temp = (Green -> Yellow ->temp);

#assert temp |=<> (Green -> Yellow);

#assert Light |=[]Green;

#assert Light |=<>Green;

#assert Light |=<>Red; 

#assert Light |=<>Yellow;

#assert Light |=<>[]Green;

#assert Light |=[]<>Red;
 
#assert Light |=[] (Red ->(! X Green));     

#assert Light |=[] (Red -> (<> Green));

#assert Light |=[] (Red -> (! (Green U Yellow)));

#assert Light |=[] (Red-> X (Red U (Yellow))); 

#assert Light |=[] (Red-> X (Red U (X (Yellow U Green)))); 





/*

 







#assert Light |= []green;

#assert Light |= <>green;



#assert Light |= <>[]green;


//Liveness: “traffic light is green infinitely often”
#assert Light |= []<>green;

//Chronological ordering: “once red, the light cannot become green immediately”
#assert Light |= [] (red ->(! X green)) ;

#assert Light |= [] (red -> (<> green));

#assert Light |= [] (red -> (! (green U yellow)));

//More detailed: “once red, the light always becomes green eventually after being yellow for some time”
#assert Light |= [] (red -> (<> green) && (! (green U yellow)));
#assert Light |= [] (red-> X (red U (yellow && X (yellow U green))));


*/
 